package round1_2012;
import java.io.*;
import java.util.*;
import java.math.*;
import java.text.*;

public class RecoverTheSequence {
	
	static final int INF = 1 << 28;
	static final double EPS = 1E-9;
	static Queue<Integer> D = new LinkedList<Integer>();
	
	static int checksum(List<Integer> arr) {
	    int result = 1;
	    for (int i = 0; i < arr.size(); i++)
	        result = (31 * result + arr.get(i)) % 1000003;
	    return result;
	}
	
	static List<Integer> merge_sort(List<Integer> arr) {
	    int n = arr.size();
	    if (n <= 1)
	        return arr;

	    // arr is indexed 0 through n-1, inclusive
	    int mid = n / 2;
	    
	    List<Integer> first_half = merge_sort(arr.subList(0, mid));
    		List<Integer> second_half = merge_sort(arr.subList(mid, n));
	    return merge(first_half, second_half);

	function merge(arr1, arr2):
	    result = []
	    while arr1.length() > 0 and arr2.length() > 0:
	        if arr1[0] < arr2[0]:
	            print '1' // for debugging
	            result.append(arr1[0])
	            arr1.remove_first()
	        else:
	            print '2' // for debugging
	            result.append(arr2[0])
	            arr2.remove_first()
	            
	    result.append(arr1)
	    result.append(arr2)
	    return result
	
	private static void hack() {
		Scanner scan = new Scanner(in);
		int T = scan.nextInt();
		for (int t = 1; t <= T; t++) {
			int N = scan.nextInt();
			String S = scan.next();
			D.clear();
			for (int i = 0; i < S.length(); i++)
				D.offer(S.charAt(i)-'0');
			List<Integer> arr = new ArrayList<Integer>();
			for (int i = 1; i <= N; i++)
				arr.add(i);
			List<Integer> orig = merge_sort(arr);
			out.print("Case #" + t + ": " + checksum(orig));
		}
	}
	
	static String read() {
		try { return in.readLine(); } catch (IOException e) { return null; }
	}
	public static void main(String[] args) throws IOException {
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(new BufferedOutputStream(System.out));
//		String file = "A-small";
//		in = new BufferedReader( new FileReader(file + ".txt") );
//		out = new PrintWriter( new FileOutputStream(file + "_" + System.currentTimeMillis() + ".out") );
		hack(); out.flush();
	}
	static BufferedReader in; static PrintWriter out;
}
